/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_RS232_H
#define _MOCK_RS232_H

#include "rs232.h"
#include "CException.h"

void mock_rs232_Init(void);
void mock_rs232_Destroy(void);
void mock_rs232_Verify(void);




#define RS232_OpenComport_IgnoreAndReturn(cmock_retval) RS232_OpenComport_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void RS232_OpenComport_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define RS232_OpenComport_ExpectAndReturn(cmock_arg1, cmock_arg2, cmock_retval) RS232_OpenComport_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_arg2, cmock_retval)
void RS232_OpenComport_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_arg1, int cmock_arg2, int cmock_to_return);
typedef int (* CMOCK_RS232_OpenComport_CALLBACK)(int cmock_arg1, int cmock_arg2, int cmock_num_calls);
void RS232_OpenComport_StubWithCallback(CMOCK_RS232_OpenComport_CALLBACK Callback);
#define RS232_OpenComport_ExpectAndThrow(cmock_arg1, cmock_arg2, cmock_to_throw) RS232_OpenComport_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_arg2, cmock_to_throw)
void RS232_OpenComport_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, int cmock_arg2, CEXCEPTION_T cmock_to_throw);
#define RS232_PollComport_IgnoreAndReturn(cmock_retval) RS232_PollComport_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void RS232_PollComport_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define RS232_PollComport_ExpectAndReturn(cmock_arg1, cmock_arg2, cmock_arg3, cmock_retval) RS232_PollComport_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_arg2, cmock_arg3, cmock_retval)
void RS232_PollComport_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_arg1, unsigned char* cmock_arg2, int cmock_arg3, int cmock_to_return);
typedef int (* CMOCK_RS232_PollComport_CALLBACK)(int cmock_arg1, unsigned char* cmock_arg2, int cmock_arg3, int cmock_num_calls);
void RS232_PollComport_StubWithCallback(CMOCK_RS232_PollComport_CALLBACK Callback);
#define RS232_PollComport_ExpectAndThrow(cmock_arg1, cmock_arg2, cmock_arg3, cmock_to_throw) RS232_PollComport_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_arg2, cmock_arg3, cmock_to_throw)
void RS232_PollComport_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, unsigned char* cmock_arg2, int cmock_arg3, CEXCEPTION_T cmock_to_throw);
#define RS232_SendByte_IgnoreAndReturn(cmock_retval) RS232_SendByte_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void RS232_SendByte_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define RS232_SendByte_ExpectAndReturn(cmock_arg1, cmock_arg2, cmock_retval) RS232_SendByte_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_arg2, cmock_retval)
void RS232_SendByte_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_arg1, unsigned char cmock_arg2, int cmock_to_return);
typedef int (* CMOCK_RS232_SendByte_CALLBACK)(int cmock_arg1, unsigned char cmock_arg2, int cmock_num_calls);
void RS232_SendByte_StubWithCallback(CMOCK_RS232_SendByte_CALLBACK Callback);
#define RS232_SendByte_ExpectAndThrow(cmock_arg1, cmock_arg2, cmock_to_throw) RS232_SendByte_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_arg2, cmock_to_throw)
void RS232_SendByte_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, unsigned char cmock_arg2, CEXCEPTION_T cmock_to_throw);
#define RS232_SendBuf_IgnoreAndReturn(cmock_retval) RS232_SendBuf_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void RS232_SendBuf_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define RS232_SendBuf_ExpectAndReturn(cmock_arg1, cmock_arg2, cmock_arg3, cmock_retval) RS232_SendBuf_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_arg2, cmock_arg3, cmock_retval)
void RS232_SendBuf_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_arg1, unsigned char* cmock_arg2, int cmock_arg3, int cmock_to_return);
typedef int (* CMOCK_RS232_SendBuf_CALLBACK)(int cmock_arg1, unsigned char* cmock_arg2, int cmock_arg3, int cmock_num_calls);
void RS232_SendBuf_StubWithCallback(CMOCK_RS232_SendBuf_CALLBACK Callback);
#define RS232_SendBuf_ExpectAndThrow(cmock_arg1, cmock_arg2, cmock_arg3, cmock_to_throw) RS232_SendBuf_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_arg2, cmock_arg3, cmock_to_throw)
void RS232_SendBuf_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, unsigned char* cmock_arg2, int cmock_arg3, CEXCEPTION_T cmock_to_throw);
#define RS232_CloseComport_Ignore() RS232_CloseComport_CMockIgnore()
void RS232_CloseComport_CMockIgnore(void);
#define RS232_CloseComport_Expect(cmock_arg1) RS232_CloseComport_CMockExpect(__LINE__, cmock_arg1)
void RS232_CloseComport_CMockExpect(UNITY_LINE_TYPE cmock_line, int cmock_arg1);
typedef void (* CMOCK_RS232_CloseComport_CALLBACK)(int cmock_arg1, int cmock_num_calls);
void RS232_CloseComport_StubWithCallback(CMOCK_RS232_CloseComport_CALLBACK Callback);
#define RS232_CloseComport_ExpectAndThrow(cmock_arg1, cmock_to_throw) RS232_CloseComport_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_to_throw)
void RS232_CloseComport_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, CEXCEPTION_T cmock_to_throw);
#define RS232_cputs_Ignore() RS232_cputs_CMockIgnore()
void RS232_cputs_CMockIgnore(void);
#define RS232_cputs_Expect(cmock_arg1, cmock_arg2) RS232_cputs_CMockExpect(__LINE__, cmock_arg1, cmock_arg2)
void RS232_cputs_CMockExpect(UNITY_LINE_TYPE cmock_line, int cmock_arg1, const char* cmock_arg2);
typedef void (* CMOCK_RS232_cputs_CALLBACK)(int cmock_arg1, const char* cmock_arg2, int cmock_num_calls);
void RS232_cputs_StubWithCallback(CMOCK_RS232_cputs_CALLBACK Callback);
#define RS232_cputs_ExpectAndThrow(cmock_arg1, cmock_arg2, cmock_to_throw) RS232_cputs_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_arg2, cmock_to_throw)
void RS232_cputs_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, const char* cmock_arg2, CEXCEPTION_T cmock_to_throw);
#define RS232_IsDCDEnabled_IgnoreAndReturn(cmock_retval) RS232_IsDCDEnabled_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void RS232_IsDCDEnabled_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define RS232_IsDCDEnabled_ExpectAndReturn(cmock_arg1, cmock_retval) RS232_IsDCDEnabled_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void RS232_IsDCDEnabled_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_arg1, int cmock_to_return);
typedef int (* CMOCK_RS232_IsDCDEnabled_CALLBACK)(int cmock_arg1, int cmock_num_calls);
void RS232_IsDCDEnabled_StubWithCallback(CMOCK_RS232_IsDCDEnabled_CALLBACK Callback);
#define RS232_IsDCDEnabled_ExpectAndThrow(cmock_arg1, cmock_to_throw) RS232_IsDCDEnabled_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_to_throw)
void RS232_IsDCDEnabled_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, CEXCEPTION_T cmock_to_throw);
#define RS232_IsCTSEnabled_IgnoreAndReturn(cmock_retval) RS232_IsCTSEnabled_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void RS232_IsCTSEnabled_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define RS232_IsCTSEnabled_ExpectAndReturn(cmock_arg1, cmock_retval) RS232_IsCTSEnabled_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void RS232_IsCTSEnabled_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_arg1, int cmock_to_return);
typedef int (* CMOCK_RS232_IsCTSEnabled_CALLBACK)(int cmock_arg1, int cmock_num_calls);
void RS232_IsCTSEnabled_StubWithCallback(CMOCK_RS232_IsCTSEnabled_CALLBACK Callback);
#define RS232_IsCTSEnabled_ExpectAndThrow(cmock_arg1, cmock_to_throw) RS232_IsCTSEnabled_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_to_throw)
void RS232_IsCTSEnabled_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, CEXCEPTION_T cmock_to_throw);
#define RS232_IsDSREnabled_IgnoreAndReturn(cmock_retval) RS232_IsDSREnabled_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void RS232_IsDSREnabled_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define RS232_IsDSREnabled_ExpectAndReturn(cmock_arg1, cmock_retval) RS232_IsDSREnabled_CMockExpectAndReturn(__LINE__, cmock_arg1, cmock_retval)
void RS232_IsDSREnabled_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_arg1, int cmock_to_return);
typedef int (* CMOCK_RS232_IsDSREnabled_CALLBACK)(int cmock_arg1, int cmock_num_calls);
void RS232_IsDSREnabled_StubWithCallback(CMOCK_RS232_IsDSREnabled_CALLBACK Callback);
#define RS232_IsDSREnabled_ExpectAndThrow(cmock_arg1, cmock_to_throw) RS232_IsDSREnabled_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_to_throw)
void RS232_IsDSREnabled_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, CEXCEPTION_T cmock_to_throw);
#define RS232_enableDTR_Ignore() RS232_enableDTR_CMockIgnore()
void RS232_enableDTR_CMockIgnore(void);
#define RS232_enableDTR_Expect(cmock_arg1) RS232_enableDTR_CMockExpect(__LINE__, cmock_arg1)
void RS232_enableDTR_CMockExpect(UNITY_LINE_TYPE cmock_line, int cmock_arg1);
typedef void (* CMOCK_RS232_enableDTR_CALLBACK)(int cmock_arg1, int cmock_num_calls);
void RS232_enableDTR_StubWithCallback(CMOCK_RS232_enableDTR_CALLBACK Callback);
#define RS232_enableDTR_ExpectAndThrow(cmock_arg1, cmock_to_throw) RS232_enableDTR_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_to_throw)
void RS232_enableDTR_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, CEXCEPTION_T cmock_to_throw);
#define RS232_disableDTR_Ignore() RS232_disableDTR_CMockIgnore()
void RS232_disableDTR_CMockIgnore(void);
#define RS232_disableDTR_Expect(cmock_arg1) RS232_disableDTR_CMockExpect(__LINE__, cmock_arg1)
void RS232_disableDTR_CMockExpect(UNITY_LINE_TYPE cmock_line, int cmock_arg1);
typedef void (* CMOCK_RS232_disableDTR_CALLBACK)(int cmock_arg1, int cmock_num_calls);
void RS232_disableDTR_StubWithCallback(CMOCK_RS232_disableDTR_CALLBACK Callback);
#define RS232_disableDTR_ExpectAndThrow(cmock_arg1, cmock_to_throw) RS232_disableDTR_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_to_throw)
void RS232_disableDTR_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, CEXCEPTION_T cmock_to_throw);
#define RS232_enableRTS_Ignore() RS232_enableRTS_CMockIgnore()
void RS232_enableRTS_CMockIgnore(void);
#define RS232_enableRTS_Expect(cmock_arg1) RS232_enableRTS_CMockExpect(__LINE__, cmock_arg1)
void RS232_enableRTS_CMockExpect(UNITY_LINE_TYPE cmock_line, int cmock_arg1);
typedef void (* CMOCK_RS232_enableRTS_CALLBACK)(int cmock_arg1, int cmock_num_calls);
void RS232_enableRTS_StubWithCallback(CMOCK_RS232_enableRTS_CALLBACK Callback);
#define RS232_enableRTS_ExpectAndThrow(cmock_arg1, cmock_to_throw) RS232_enableRTS_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_to_throw)
void RS232_enableRTS_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, CEXCEPTION_T cmock_to_throw);
#define RS232_disableRTS_Ignore() RS232_disableRTS_CMockIgnore()
void RS232_disableRTS_CMockIgnore(void);
#define RS232_disableRTS_Expect(cmock_arg1) RS232_disableRTS_CMockExpect(__LINE__, cmock_arg1)
void RS232_disableRTS_CMockExpect(UNITY_LINE_TYPE cmock_line, int cmock_arg1);
typedef void (* CMOCK_RS232_disableRTS_CALLBACK)(int cmock_arg1, int cmock_num_calls);
void RS232_disableRTS_StubWithCallback(CMOCK_RS232_disableRTS_CALLBACK Callback);
#define RS232_disableRTS_ExpectAndThrow(cmock_arg1, cmock_to_throw) RS232_disableRTS_CMockExpectAndThrow(__LINE__, cmock_arg1, cmock_to_throw)
void RS232_disableRTS_CMockExpectAndThrow(UNITY_LINE_TYPE cmock_line, int cmock_arg1, CEXCEPTION_T cmock_to_throw);

#endif
